generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(uuid())
  name        String                       
  ownerName   String?                              
  ownerEmail  String?                              
  owner       User?    @relation("OrganizationOwner", fields: [ownerEmail], references: [email], onDelete: Cascade) // Relates to User
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt 
  projects    Project[] // Add this line to establish the back relation
}

model Project {
  id                String   @id @default(uuid())
  name              String  
  ownerName         String?                              
  ownerEmail        String? 
  organizationId    String   // the foreign key should be required
  organization      Organization @relation(fields: [organizationId], references: [id]) // this line for the relation
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  bpmn              Bpmn[] // Add this line to establish the back relation
}

model Bpmn {
  id                String   @id @default(uuid())
  currentVersionId  String
  projectId         String?
  ownerName         String
  ownerEmail        String
<<<<<<< Updated upstream
=======
  createdBy         String
>>>>>>> Stashed changes
  isFavorite        Boolean  @default(false)
  isShared          Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  project           Project? @relation(fields: [projectId], references: [id]) // this line for the relation
<<<<<<< Updated upstream
  invitations       Invitation[] // Add this line to establish the back relation
}

model Invitation {
  id        String   @id @default(uuid())
  email     String
  token     String
  bpmnId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  bpmn      Bpmn     @relation(fields: [bpmnId], references: [id]) // Add this line for the relation
=======
>>>>>>> Stashed changes
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]

  // Explicit relation for the reverse side
  organizations Organization[]  @relation("OrganizationOwner")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
