generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String    @id @default(uuid())
  name      String
  createdBy String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation("OrganizationOwner", fields: [createdBy], references: [id], onDelete: Cascade)
  projects  Project[] @relation("OrganizationProjects")
}

model Project {
  id             String       @id @default(uuid())
  name           String
  createdBy      String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  bpmn           Bpmn[]       @relation("ProjectBpmn")
  user           User         @relation("ProjectOwner", fields: [createdBy], references: [id], onDelete: Cascade)
  organization   Organization @relation("OrganizationProjects", fields: [organizationId], references: [id])
}

model Bpmn {
  id              String            @id @default(uuid())
  fileName        String
  projectId       String?
  createdBy       String
  isFavorite      Boolean           @default(false)
  isShared        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  user            User              @relation("BpmnOwner", fields: [createdBy], references: [id], onDelete: Cascade)
  project         Project?          @relation("ProjectBpmn", fields: [projectId], references: [id])
  invitations     Invitation[]
  StakeholderBpmn StakeholderBpmn[]
}

model Invitation {
  id        String   @id @default(uuid())
  email     String
  token     String    @unique
  bpmnId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  bpmn      Bpmn     @relation(fields: [bpmnId], references: [id])
  status    InvitationStatus?
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String            @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  role            Role?
  accounts        Account[]
  Authenticator   Authenticator[]
  bpmnFiles       Bpmn[]            @relation("BpmnOwner")
  organization    Organization?     @relation("OrganizationOwner")
  projects        Project[]         @relation("ProjectOwner")
  sessions        Session[]
  StakeholderBpmn StakeholderBpmn[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model StakeholderBpmn {
  userId String
  bpmnId String
  bpmn   Bpmn   @relation(fields: [bpmnId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, bpmnId])
}

enum Role {
  MEMBER
  STAKEHOLDER
  ADMIN
}

enum InvitationStatus {
  PENDING
  ACCEPTED
}